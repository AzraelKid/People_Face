# -*- coding:utf-8 -*-

# 修改尺寸
import os
import numpy as np
import cv2
import sys

IMAGE_SIZE = 64

# 按照指定图像的大小调整尺寸，函数功能是判断图片是不是正方形，如果不是，则增加短边的长度变为正方形
# 这样再调用cv2.resize()函数就可以实现等比例缩放了，因为我们指定的缩放比例就是64*64，只有缩放之前的图像为正方形才确保图像不失真
def resize_image(image,hight = IMAGE_SIZE,wide = IMAGE_SIZE):
    top,bottom,left,right = (0,0,0,0)

    # 获取图像尺寸h和w  最后一个是channel
    h,w,_ = image.shape

    #对于等长的图片，找到长的那一边
    longest_edge = max(h,w)

    #计算短边需要加多少像素宽度使其与长边等长
    if h < longest_edge:
        dh = longest_edge - h
        top = dh // 2
        bottom = dh - top

    elif w < longest_edge:
        dw = longest_edge - w
        left = dw // 2
        right = dw -left

    else:
        pass

    #RGB颜色
    BLACK = [0,0,0]

    #给图像增加边界，让图像长宽相等，cv2.BORDER_CONSTANT指定边界颜色由value指定
    constant = cv2.copyMakeBorder(image,top,bottom,left,right,cv2.BORDER_CONSTANT,value=BLACK)

    #调整图像大小并返回

    return cv2.resize(constant,(hight,wide))

#读取训练数据
images = []
labels = []

def read_path(path_name):
    #这一步的操作，是得到所有图片的绝对路径
    for dir_item in os.listdir(path_name):  #遍历出所有的名字
        # 从初始路径开始叠加，合并成可识别的操作路径
        full_path = os.path.abspath(os.path.join(path_name,dir_item))  #组合照片名字和路径名字

        if os.path.isdir(full_path):  #如果是文件夹，继续递归调用
            read_path(full_path)  #递归调用

        else:
            if dir_item.endswith('.jpg'):  #文件名后缀是 jpg

                image = cv2.imread(full_path)

                image = resize_image(image,IMAGE_SIZE,IMAGE_SIZE)

                #放开这个代码，可以看到resize_image()函数的实际调用效果
                # cv2.imwrite('1.jpg',image)

                images.append(image)
                labels.append(path_name)

    return images,labels

#从指定路径读取训练数据
def load_data(path_name):
    images, labels = read_path(path_name)

    #将输入的所有图片转化为一个四维数组，尺寸为（图片数量*64*64*3）
    # 将图片为64*64像素，一个像素3个颜色值（RGB）
    images = np.array(images)
    # print(images,shape)

    labels = np.array(labels)

    return images,labels

if __name__ == '__main__':
    images,labels = load_data(r'E:\pythonPro\FilePro\venv\Scripts\nwq')
